/*
* generated by Xtext
*/
grammar InternalEMFProfileDecorationLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.modelversioning.emfprofile.decoration.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.modelversioning.emfprofile.decoration.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.modelversioning.emfprofile.decoration.services.EMFProfileDecorationLanguageGrammarAccess;

}

@parser::members {
 
 	private EMFProfileDecorationLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(EMFProfileDecorationLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleEMFProfileDecorationModel
entryRuleEMFProfileDecorationModel 
:
{ before(grammarAccess.getEMFProfileDecorationModelRule()); }
	 ruleEMFProfileDecorationModel
{ after(grammarAccess.getEMFProfileDecorationModelRule()); } 
	 EOF 
;

// Rule EMFProfileDecorationModel
ruleEMFProfileDecorationModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEMFProfileDecorationModelAccess().getGroup()); }
(rule__EMFProfileDecorationModel__Group__0)
{ after(grammarAccess.getEMFProfileDecorationModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecoration
entryRuleDecoration 
:
{ before(grammarAccess.getDecorationRule()); }
	 ruleDecoration
{ after(grammarAccess.getDecorationRule()); } 
	 EOF 
;

// Rule Decoration
ruleDecoration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecorationAccess().getGroup()); }
(rule__Decoration__Group__0)
{ after(grammarAccess.getDecorationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EMFProfileDecorationModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EMFProfileDecorationModel__Group__0__Impl
	rule__EMFProfileDecorationModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EMFProfileDecorationModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEMFProfileDecorationModelAccess().getDecoratingProfileKeyword_0()); }

	'decorating profile' 

{ after(grammarAccess.getEMFProfileDecorationModelAccess().getDecoratingProfileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EMFProfileDecorationModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EMFProfileDecorationModel__Group__1__Impl
	rule__EMFProfileDecorationModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EMFProfileDecorationModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEMFProfileDecorationModelAccess().getImportURIAssignment_1()); }
(rule__EMFProfileDecorationModel__ImportURIAssignment_1)
{ after(grammarAccess.getEMFProfileDecorationModelAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EMFProfileDecorationModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EMFProfileDecorationModel__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EMFProfileDecorationModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEMFProfileDecorationModelAccess().getDecorationsAssignment_2()); }
(rule__EMFProfileDecorationModel__DecorationsAssignment_2)*
{ after(grammarAccess.getEMFProfileDecorationModelAccess().getDecorationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Decoration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decoration__Group__0__Impl
	rule__Decoration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecorationAccess().getDecorationKeyword_0()); }

	'decoration' 

{ after(grammarAccess.getDecorationAccess().getDecorationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Decoration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decoration__Group__1__Impl
	rule__Decoration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecorationAccess().getDecorationsAssignment_1()); }
(rule__Decoration__DecorationsAssignment_1)
{ after(grammarAccess.getDecorationAccess().getDecorationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Decoration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decoration__Group__2__Impl
	rule__Decoration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecorationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getDecorationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Decoration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decoration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecorationAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getDecorationAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__EMFProfileDecorationModel__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEMFProfileDecorationModelAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getEMFProfileDecorationModelAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EMFProfileDecorationModel__DecorationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEMFProfileDecorationModelAccess().getDecorationsDecorationParserRuleCall_2_0()); }
	ruleDecoration{ after(grammarAccess.getEMFProfileDecorationModelAccess().getDecorationsDecorationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__DecorationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecorationAccess().getDecorationsStereotypeCrossReference_1_0()); }
(
{ before(grammarAccess.getDecorationAccess().getDecorationsStereotypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDecorationAccess().getDecorationsStereotypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDecorationAccess().getDecorationsStereotypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


