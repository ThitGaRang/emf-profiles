grammar org.modelversioning.emfprofile.decoration.EMFProfileDecorationLanguage with org.eclipse.xtext.common.Terminals

generate decorationLanguage "http://www.modelversioning.org/emfprofile/decoration/EMFProfileDecorationLanguage"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.modelversioning.org/emfprofile/1.1" as profile

DecorationModel:
	"import resource" importURI = STRING  // makes sense only for ImportURIScopingFragment and SimpleNameProvider
	(namespace=Namespace)?
	decorationDescriptions+=DecorationDescription*;

Namespace:
//	'profile' importedNamespace=QualifiedNameWithWildcard;
	'profile' profile=[profile::Profile|QualifiedName];

DecorationDescription:
	'decoration' stereotype=[profile::Stereotype|QualifiedName] '{' 
		(decorations+=(AbstractDecoration)+
		& (activation=Activation)?) 
	'}'
;

// For all decorations, if they have optional values then some default value will be used. See comments below.
AbstractDecoration:
	ImageDecoration // has an effect on both nodes and edges
	| BorderDecoration | ColorDecoration // has an effect only on nodes
	| ConnectionDecoration; // has an effect only on edges


ImageDecoration:
	{ImageDecoration}
	'image' '{' 
		(
			('location-uri' '=' location_uri=STRING) 
			& (direction=Direction)? // default value will be: for node = north_west; for edge = center
			& (margin=Margin)? // default value will be: -1 on nodes, 50 for connection (for connection margin is interpreted as percentage) 
			& ('tooltip' '=' tooltip=Text)?
			& (activation=Activation)? 
		)
	'}'
;


BorderDecoration:
	{BorderDecoration}
	'border' '{' 
		(
			(size=Size)? // default value will be: 1
			& ('color' '=' color=Color)? // default value will be: black
			& (style=Style)?// default value will be: solid
			& (activation=Activation)?
		)
	'}'
;

ColorDecoration:
	{ColorDecoration}
	'color' '{'
		(
			('background' '=' background=Color)?
			& ('foreground' '=' foreground=Color)?
			& (activation=Activation)?
		)	
	'}'
;


ConnectionDecoration:
	{ConnectionDecoration}
	'connection' '{'
		(
			(size=Size)?
			& (style=Style)?
			& ('foreground-color' '=' foregroundColor=Color)?
			& ('background-color' '=' backgroundColor=Color)?
			& (activation=Activation)?
		)
	'}'
;

/**
 * The text which we can include in the visualization, e.g., hover text over image decoration.
 * Can be build out of Strings and attribute values of the applied stereotype.
 */
Text:
	SimpleText | ComplexText
;

SimpleText:
	text=STRING | attribute=[ecore::EAttribute|QualifiedName]
;
ComplexText:
	left=SimpleText '+' right=Text
;

Style:
	'line-style' '=' value=LineStyle
;

Size:
	'size' '=' value=INT
;

Direction:
	'direction' '=' value=Directions
;

Margin:
	'margin' '=' value=SignedInteger
;

Color:
	{Color}
	value=ColorConstant | concrete = ConcreteColor
;

ConcreteColor:
	RGB | HexColor
;

RGB:
	'RGB' '(' red=INT ',' green=INT ',' blue=INT ')'	
;

HexColor: 
	hexCode = HEX_COLOR
;

ColorConstant:
	value=Colors
;

Activation:
	'active when' condition=AbstractCondition
;

AbstractCondition:
	Condition | CompositeCondition
;

Condition:
	attribute=[ecore::EAttribute|QualifiedName] operator=ComparisonOperator value=Type
;

CompositeCondition:
	operator=LogicalOperator '(' conditions += (AbstractCondition )+  ')'
;

Type:
	SignedInteger | SignedDouble | STRING | BOOLEAN | ID
;

SignedDouble returns ecore::EDouble :
	'-'? INT '.' INT
;

SignedInteger returns ecore::EInt:
	'-'? INT
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;


terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false'
;

terminal HEX_COLOR:
  '#' 
  (('a'..'f'|'A'..'F'|'0'..'9') ('a'..'f'|'A'..'F'|'0'..'9') ('a'..'f'|'A'..'F'|'0'..'9'))?
  ('a'..'f'|'A'..'F'|'0'..'9') ('a'..'f'|'A'..'F'|'0'..'9') ('a'..'f'|'A'..'F'|'0'..'9')
;

enum ComparisonOperator:
	EQUAL='==' |
	UNEQUAL='!=' |
	GREATER='>' |
	GREATEROREQUAL='>=' |
	LOWER='<' |
	LOWEROREQUAL='<=' 
;

enum LogicalOperator:
	ALL='all' |
	ANY='any' 
;

enum LineStyle:
	LINE_SOLID = 'solid' |
	LINE_DOT = 'dot' |
	LINE_DASH = 'dash' |
	LINE_DASHDOT = 'dash_dot' |
	LINE_DASHDOTDOT = 'dash_dot_dot'
;

enum Colors:
	RED = 'red' |
	BLACK = 'black' |
	WHITE = 'white' |
	GREEN = 'green' |
	GREEN_LIGHT = 'green_light' |
	GREEN_DARK = 'green_dark' |
	BLUE = 'blue' |
	BLUE_LIGHT = 'blue_light' |
	BLUE_DARK = 'blue_dark' |
	GRAY = 'gray' |
	GRAY_LIGHT = 'gray_light' |
	GRAY_DARK = 'gray_dark' |
	ORANGE = 'orange' |
	YELLOW = 'yellow' |
	CYAN = 'cyan'
	;

enum Directions:
	CENTER = 'center' |
	NORHT = 'north' |
	SOUTH = 'south' |
	WEST = 'west' |
	EAST = 'east' |
	NORTH_EAST = 'north_east' |
	NORTH_WEST = 'north_west' |
	SOUTH_EAST = 'south_east' |
	SOUTH_WEST = 'south_west'
;


