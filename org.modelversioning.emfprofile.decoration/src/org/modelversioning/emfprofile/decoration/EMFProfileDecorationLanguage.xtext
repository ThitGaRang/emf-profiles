grammar org.modelversioning.emfprofile.decoration.EMFProfileDecorationLanguage with org.eclipse.xtext.common.Terminals

generate decorationLanguage "http://www.modelversioning.org/emfprofile/decoration/EMFProfileDecorationLanguage"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.modelversioning.org/emfprofile/1.1" as profile

DecorationModel:
	"import resource" importURI = STRING  // makes sense only for ImportURIScopingFragment and SimpleNameProvider
	(namespace=Namespace)?
	decorationDescriptions+=DecorationDescription*
;

Namespace:
//	'profile' importedNamespace=QualifiedNameWithWildcard;
	'profile' profile=[profile::Profile|QualifiedName]
;

DecorationDescription:
	'decoration' stereotype=[profile::Stereotype|QualifiedName] '{' 
		(
			decorations+=(AbstractDecoration)+
			& (activation=Activation)?
		) 
	'}'
;

// For all decorations, if they have optional values then some default value will be used. See comments below.
AbstractDecoration:
	ImageDecoration | BoxDecoration | ColorDecoration // has an effect on both nodes and edges
	| BorderDecoration // has an effect only on nodes
	| ConnectionDecoration // has an effect only on edges
;


ImageDecoration:
	{ImageDecoration}
	'image' '{' 
		(
			('uri' '=' location_uri=STRING) 
			& (direction=Direction)? // default value for the node = NORTH_WEST, and for edge = CENTER
			& (margin=Margin)? // default value -1 on nodes, 50 for connections (for connections margin is interpreted as a percentage) 
			& ('tooltip' '=' tooltip=Text)?
			& (activation=Activation)? 
		)
	'}'
;

BoxDecoration :
	{BoxDecoration}
	'box' '{'
		(	
			// mandatory
			('text' '=' text=Text)
			& ('width' '=' width=INT)
			& ('height' '=' height=INT)
			
			// optional
			& (image=BoxImage)?
			& ('border' '{' border=Border '}')?
			& ('foregroundColor' '=' foregroundColor=Color)?
			& ('backgroundColor' '=' backgroundColor=Color)?
			& (direction=Direction)? // default value for node = NORTH_WEST; for edge = CENTER
			& (margin=Margin)? // default value -1 on nodes, 50 for connection (for connection margin is interpreted as percentage)
			& ('contentDirection' '=' contentDirection=Directions)? // default is CENTER
			& ('tooltip' '=' tooltip=Text)?
			& (activation=Activation)?
		)
	'}'
;

BorderDecoration:
	{BorderDecoration}
	'border' '{' 
		(
			(border=Border)
			& (activation=Activation)?
		)
	'}'
;


ColorDecoration:
	{ColorDecoration}
	'color' '{'
		(
			('background' '=' background=Color)?
			& ('foreground' '=' foreground=Color)?
			& (activation=Activation)?
		)	
	'}'
;

ConnectionDecoration:
	{ConnectionDecoration}
	'connection' '{'
		(
			(size=Size)?
			& (style=Style)?
			& ('color' '=' color=Color)?
			& (activation=Activation)?
		)
	'}'
;

/**
 * The text which we can include in the visualization, e.g., the hover text over an image decoration.
 * It can be build out of Strings and tagged values of the applied stereotype.
 */
Text:
	SimpleText | ComplexText
;

SimpleText:
	text=STRING | attribute=[ecore::EAttribute|QualifiedName]
;

ComplexText:
	left=SimpleText '+' right=Text
;

Border:
	{Border}
	(	(size=Size)? // default value is 1
		& ('color' '=' color=Color)? // default value is BLACK
		& (style=Style)?// default value is SOLID
	)	
;

BoxImage : 
	{BoxImage}
	'image' '{' 
		(
			('uri' '=' location_uri=STRING)
			& ('placement' '=' placement = BoxImageOrientation)? // default value is WEST
		) 
	'}'
;

Style:
	'lineStyle' '=' value=LineStyle
;

Size:
	'size' '=' value=INT
;

Direction:
	'direction' '=' value=Directions
;

Margin:
	'margin' '=' value=SignedInteger
;

//RelativePosition:
//	'(' x=SignedInteger ',' y=SignedInteger ')'
//;

Color:
	{Color}
	value=ColorConstant | concrete = ConcreteColor
;

ConcreteColor:
	RGB | HexColor
;

RGB:
	'RGB' '(' red=INT ',' green=INT ',' blue=INT ')'	
;

HexColor: 
	hexCode = HEX_COLOR
;

ColorConstant:
	value=Colors
;

Activation:
	'active when' condition=AbstractCondition
;

AbstractCondition:
	Condition | CompositeCondition | OclExpression
;

OclExpression:
	'ocl' '(' expression = STRING ')'
;

Condition:
	attribute=[ecore::EAttribute|QualifiedName] operator=ComparisonOperator value=Type
;

CompositeCondition:
	operator=LogicalOperator '(' conditions += (AbstractCondition )+  ')'
;

Type:
	SignedInteger | SignedDouble | STRING | BOOLEAN | ID
;

SignedDouble returns ecore::EDouble :
	'-'? INT '.' INT
;

SignedInteger returns ecore::EInt:
	'-'? INT
;

//QualifiedNameWithWildcard:
//	QualifiedName '.*'?;

QualifiedName returns ecore::EString:
	ID ('.' ID)*
;

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false'
;

terminal HEX_COLOR:
  '#' 
  (('a'..'f'|'A'..'F'|'0'..'9') ('a'..'f'|'A'..'F'|'0'..'9') ('a'..'f'|'A'..'F'|'0'..'9'))?
  ('a'..'f'|'A'..'F'|'0'..'9') ('a'..'f'|'A'..'F'|'0'..'9') ('a'..'f'|'A'..'F'|'0'..'9')
;

enum BoxImageOrientation:
	WEST |
	NORTH | 
	EAST |
	SOUTH
;

enum ComparisonOperator:
	EQUAL='==' |
	UNEQUAL='!=' |
	GREATER='>' |
	GREATEROREQUAL='>=' |
	LOWER='<' |
	LOWEROREQUAL='<=' 
;

enum LogicalOperator:
	ALL |
	ANY 
;

enum LineStyle:
	LINE_SOLID = 'SOLID' |
	LINE_DOT = 'DOTS' |
	LINE_DASH = 'DASH' |
	LINE_DASHDOT = 'DASHDOT' |
	LINE_DASHDOTDOT = 'DASHDOTDOT'
;

enum Colors:
	RED |
	BLACK |
	WHITE |
	GREEN |
	GREEN_LIGHT |
	GREEN_DARK |
	BLUE |
	BLUE_LIGHT |
	BLUE_DARK |
	GRAY |
	GRAY_LIGHT |
	GRAY_DARK |
	ORANGE |
	YELLOW |
	CYAN
;

enum Directions:
	CENTER |
	NORTH |
	SOUTH |
	WEST |
	EAST |
	NORTH_EAST |
	NORTH_WEST |
	SOUTH_EAST |
	SOUTH_WEST
;